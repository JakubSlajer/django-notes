{
	"info": {
		"_postman_id": "3995234b-749f-405d-b5fa-e2b747ab1eb0",
		"name": "Django Notes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authenticate via OAuth2 client credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"oauthAccessToken\", jsonData.token);\r",
							"pm.test(\"Response body contains token\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/auth/oauth/token/",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"auth",
						"oauth",
						"token",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response have body\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"count\");\r",
							"    pm.expect(jsonData).to.have.property(\"next\");\r",
							"    pm.expect(jsonData).to.have.property(\"previous\");\r",
							"    pm.expect(jsonData).to.have.property(\"results\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Groups",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response have body\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"count\");\r",
							"    pm.expect(jsonData).to.have.property(\"next\");\r",
							"    pm.expect(jsonData).to.have.property(\"previous\");\r",
							"    pm.expect(jsonData).to.have.property(\"results\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/groups",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Profiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response have body\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"count\")\r",
							"    pm.expect(jsonData).to.have.property(\"next\")\r",
							"    pm.expect(jsonData).to.have.property(\"previous\")\r",
							"    pm.expect(jsonData).to.have.property(\"results\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profiles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profiles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response have body\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"count\");\r",
							"    pm.expect(jsonData).to.have.property(\"next\");\r",
							"    pm.expect(jsonData).to.have.property(\"previous\");\r",
							"    pm.expect(jsonData).to.have.property(\"results\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response have body\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"count\");\r",
							"    pm.expect(jsonData).to.have.property(\"next\");\r",
							"    pm.expect(jsonData).to.have.property(\"previous\");\r",
							"    pm.expect(jsonData).to.have.property(\"results\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:objectId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":objectId"
					],
					"variable": [
						{
							"key": "objectId",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response have body\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"count\");\r",
							"    pm.expect(jsonData).to.have.property(\"next\");\r",
							"    pm.expect(jsonData).to.have.property(\"previous\");\r",
							"    pm.expect(jsonData).to.have.property(\"results\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profiles/:objectId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profiles",
						":objectId"
					],
					"variable": [
						{
							"key": "objectId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response have body\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"count\");\r",
							"    pm.expect(jsonData).to.have.property(\"next\");\r",
							"    pm.expect(jsonData).to.have.property(\"previous\");\r",
							"    pm.expect(jsonData).to.have.property(\"results\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profiles/:objectId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profiles",
						":objectId"
					],
					"variable": [
						{
							"key": "objectId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response have body\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"count\");\r",
							"    pm.expect(jsonData).to.have.property(\"next\");\r",
							"    pm.expect(jsonData).to.have.property(\"previous\");\r",
							"    pm.expect(jsonData).to.have.property(\"results\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes/:objectId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						":objectId"
					],
					"variable": [
						{
							"key": "objectId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{oauthAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}